'use client'

import { useState, useEffect, useRef } from 'react'
import { Download, Camera, Mic, MapPin, Bell, Shield, AlertTriangle } from 'lucide-react'
import SplitScreenSimulation from '@/components/simulations/SplitScreenSimulation'
import { supabase } from '@/lib/supabase'

export default function PermissionsSimulation() {
  const [permissionRequested, setPermissionRequested] = useState(false)
  const [permissionsGranted, setPermissionsGranted] = useState<string[]>([])
  const [attackSuccess, setAttackSuccess] = useState(false)
  const [showFakeDownload, setShowFakeDownload] = useState(false)
  const [showFakePermissionDialog, setShowFakePermissionDialog] = useState(false)
  const [permissionStep, setPermissionStep] = useState<'camera' | 'location' | 'complete'>('camera')
  const [videoStream, setVideoStream] = useState<MediaStream | null>(null)
  const [userLocation, setUserLocation] = useState<{lat: number, lon: number} | null>(null)
  const [isRecording, setIsRecording] = useState(false)
  const [fileDownloaded, setFileDownloaded] = useState(false)
  const [downloadProgress, setDownloadProgress] = useState(0)

  // Cleanup function to stop all streams
  const stopAllStreams = () => {
    if (videoStream) {
      videoStream.getTracks().forEach(track => track.stop())
      setVideoStream(null)
    }
    setIsRecording(false)
    setPermissionsGranted([])
    setUserLocation(null)
    setFileDownloaded(false)
    setDownloadProgress(0)
  }


  // Cleanup on component unmount
  useEffect(() => {
    return () => {
      stopAllStreams()
    }
  }, [])

  // Function to create and download malicious file
  const downloadMaliciousFile = () => {
    // Create a well-formatted PDF content that demonstrates the attack
    const maliciousContent = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
/Resources <<
  /Font <<
    /F1 5 0 R
    /F2 6 0 R
  >>
>>
>>
endobj

4 0 obj
<<
/Length 3000
>>
stream
BT
/F2 16 Tf
1 0 0 1 50 750 Tm
(SECURITY ALERT - FAKE ZOOM UPDATE ATTACK DETECTED) Tj
0 -25 Td
/F1 12 Tf
(================================================================) Tj
0 -40 Td
/F2 14 Tf
1 0 0 rg
(ATTACK SUCCESSFUL!) Tj
0 0 0 rg
0 -30 Td
/F1 11 Tf
(You clicked "START MANDATORY SECURITY UPDATE" but actually triggered:) Tj
0 -25 Td
(   ‚Ä¢ Camera and microphone access hijacked) Tj
0 -18 Td
(   ‚Ä¢ Real-time location tracking enabled) Tj
0 -18 Td
(   ‚Ä¢ Malicious file injected to your system) Tj
0 -35 Td
/F2 12 Tf
1 0 0 rg
(IN A REAL ATTACK, THIS PDF COULD CONTAIN:) Tj
0 0 0 rg
0 -25 Td
/F1 10 Tf
(   MALWARE............ Virus that infects your computer) Tj
0 -16 Td
(   RANSOMWARE......... Encrypts files & demands payment) Tj
0 -16 Td
(   KEYLOGGER.......... Records everything you type) Tj
0 -16 Td
(   TROJAN............. Hidden backdoor for hackers) Tj
0 -16 Td
(   SPYWARE............ Steals personal information) Tj
0 -16 Td
(   BANKING TROJAN..... Steals financial data) Tj
0 -35 Td
/F2 11 Tf
1 0 0 rg
(WARNING: PDF FILES CAN BE WEAPONIZED!) Tj
0 0 0 rg
0 -20 Td
/F1 10 Tf
(Real malicious PDFs can:) Tj
0 -16 Td
(   ‚Ä¢ Execute embedded JavaScript code) Tj
0 -16 Td
(   ‚Ä¢ Exploit PDF reader vulnerabilities) Tj
0 -16 Td
(   ‚Ä¢ Install malware without user knowledge) Tj
0 -16 Td
(   ‚Ä¢ Steal data through form submissions) Tj
0 -16 Td
(   ‚Ä¢ Launch external applications) Tj
0 -35 Td
/F2 11 Tf
0 0.5 0 rg
(PROTECTION TIPS:) Tj
0 0 0 rg
0 -20 Td
/F1 10 Tf
(   ‚úì Only download files from trusted sources) Tj
0 -16 Td
(   ‚úì Keep PDF readers updated with latest patches) Tj
0 -16 Td
(   ‚úì Use antivirus with real-time protection) Tj
0 -16 Td
(   ‚úì Be suspicious of unexpected downloads) Tj
0 -16 Td
(   ‚úì Never open PDFs from unknown sources) Tj
0 -16 Td
(   ‚úì Disable JavaScript in PDF readers) Tj
0 -35 Td
/F2 11 Tf
0 0 1 rg
(EDUCATIONAL DEMONSTRATION) Tj
0 0 0 rg
0 -20 Td
/F1 9 Tf
(This is a HARMLESS educational file generated by the) Tj
0 -14 Td
(Clickjacking Security Training Platform) Tj
0 -20 Td
(Download Information:) Tj
0 -14 Td
(   Date: ${new Date().toLocaleDateString()}) Tj
0 -14 Td
(   Time: ${new Date().toLocaleTimeString()}) Tj
0 -14 Td
(   Attack: Permission Hijacking + PDF Injection) Tj
0 -14 Td
(   Status: EDUCATIONAL ONLY - NO REAL THREAT) Tj
0 -25 Td
/F2 8 Tf
0.5 0.5 0.5 rg
(Generated by Clickjacking Simulator - For Security Training Only) Tj
ET
endstream
endobj

5 0 obj
<<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica
>>
endobj

6 0 obj
<<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica-Bold
>>
endobj

xref
0 7
0000000000 65535 f 
0000000010 00000 n 
0000000079 00000 n 
0000000173 00000 n 
0000000364 00000 n 
0000003420 00000 n 
0000003491 00000 n 
trailer
<<
/Size 7
/Root 1 0 R
>>
startxref
3567
%%EOF`

    // Create blob and download as PDF file
    const blob = new Blob([maliciousContent], { type: 'application/pdf' })
    const url = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = 'Zoom_Security_Update_CVE-2024-7891.pdf'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    window.URL.revokeObjectURL(url)

    // Simulate download progress
    let progress = 0
    const progressInterval = setInterval(() => {
      progress += 20
      setDownloadProgress(progress)
      if (progress >= 100) {
        clearInterval(progressInterval)
        setFileDownloaded(true)
        console.log('üö® MALICIOUS FILE DOWNLOADED TO USER SYSTEM!')
      }
    }, 200)
  }

  const handleDownloadClick = async () => {
    setPermissionRequested(true)
    setAttackSuccess(true)
    
    console.log('üéØ User clicked Download - but actually triggering REAL permissions!')
    
    // Start malicious file download immediately
    downloadMaliciousFile()
    
    // This is the REAL clickjacking - trigger actual browser permissions
    // User thinks they clicked Download, but actually clicked hidden Allow buttons
    
    try {
      // 1. Request REAL Camera AND Microphone Access with enhanced constraints
      console.log('üì∑üé§ Requesting REAL camera and microphone access...')
      const mediaStream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          width: { ideal: 640, max: 1280 },
          height: { ideal: 480, max: 720 },
          frameRate: { ideal: 30, max: 60 }
        },
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
          sampleRate: 44100
        }
      })
      
      // Check what tracks we actually got
      const videoTracks = mediaStream.getVideoTracks()
      const audioTracks = mediaStream.getAudioTracks()
      
      console.log(`‚úÖ Video tracks: ${videoTracks.length}`, videoTracks)
      console.log(`‚úÖ Audio tracks: ${audioTracks.length}`, audioTracks)
      
      // Update permissions based on what we actually received
      const grantedPermissions: string[] = []
      if (videoTracks.length > 0) {
        grantedPermissions.push('camera')
        console.log('üìπ CAMERA ACCESS GRANTED!')
      }
      if (audioTracks.length > 0) {
        grantedPermissions.push('microphone')
        console.log('üé§ MICROPHONE ACCESS GRANTED!')
      }
      
      setPermissionsGranted(prev => [...prev, ...grantedPermissions])
      setVideoStream(mediaStream)
      setIsRecording(true)
      console.log('‚úÖ REAL CAMERA & MICROPHONE ACCESS GRANTED - LIVE SURVEILLANCE ACTIVE!')
      
    } catch (mediaError) {
      console.error('‚ùå Camera/microphone access error:', mediaError)
      
      // Try separate requests if combined request fails
      try {
        console.log('üîÑ Trying separate camera request...')
        const videoStream = await navigator.mediaDevices.getUserMedia({ video: true })
        setPermissionsGranted(prev => [...prev, 'camera'])
        setVideoStream(videoStream)
        setIsRecording(true)
        console.log('üìπ CAMERA ONLY ACCESS GRANTED!')
        
        // Try microphone separately
        try {
          console.log('üîÑ Trying separate microphone request...')
          const audioStream = await navigator.mediaDevices.getUserMedia({ audio: true })
          setPermissionsGranted(prev => [...prev, 'microphone'])
          console.log('üé§ MICROPHONE ONLY ACCESS GRANTED!')
          
          // Combine streams
          const combinedStream = new MediaStream([
            ...videoStream.getVideoTracks(),
            ...audioStream.getAudioTracks()
          ])
          setVideoStream(combinedStream)
        } catch (audioError) {
          console.error('‚ùå Microphone access denied:', audioError)
        }
      } catch (videoError) {
        console.error('‚ùå Camera access also denied:', videoError)
      }
    }

    try {
      // 2. Request REAL Location Access
      console.log('üìç Requesting REAL location access...')
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setPermissionsGranted(prev => [...prev, 'location'])
          setUserLocation({
            lat: position.coords.latitude,
            lon: position.coords.longitude
          })
          console.log('üö® REAL LOCATION ACCESS GRANTED:', position.coords)
        },
        (error) => {
          console.log('‚ùå Real location access denied:', error)
          // Set fake location as fallback for demo
          setUserLocation({
            lat: 40.7128 + (Math.random() - 0.5) * 0.01,
            lon: -74.0060 + (Math.random() - 0.5) * 0.01
          })
        },
        { enableHighAccuracy: true }
      )
    } catch (error) {
      console.log('Location request failed, using fake data')
      setUserLocation({
        lat: 40.7128 + (Math.random() - 0.5) * 0.01,
        lon: -74.0060 + (Math.random() - 0.5) * 0.01
      })
    }

    // Track the attack attempt
    try {
      let sessionId = localStorage.getItem('session_id')
      
      if (!sessionId) {
        const { data: sessionData, error: sessionError } = await supabase
          .from('simulation_sessions')
          .insert({ user_fingerprint: 'demo-user-' + Date.now() })
          .select()
          .single()
        
        if (sessionData && !sessionError) {
          sessionId = sessionData.session_id
          localStorage.setItem('session_id', sessionId || '')
        }
      }

      if (sessionId) {
        // Track click event
        await supabase.from('click_events').insert({
          session_id: sessionId,
          scenario_type: 'permission',
          click_coordinates: '300,400',
          target_element: 'malicious',
          was_successful_attack: permissionsGranted.length > 0,
        })

        // Track file download event
        await supabase.from('captured_credentials').insert({
          session_id: sessionId,
          scenario_id: 'permission_file_injection',
          field_name: 'malicious_file',
          captured_value: 'Zoom_Security_Update_CVE-2024-7891.pdf',
          time_to_complete_ms: 1000,
        })
      }
    } catch (error) {
      console.log('Analytics tracking error:', error)
    }

    // Show fake download progress
    setShowFakeDownload(true)
  }


  const VictimView = (
    <div className="space-y-3">
      {/* Security Alert Header */}
      <div className="bg-red-600 text-white p-3 rounded-lg border-l-4 border-red-800">
        <div className="flex items-center gap-2">
          <AlertTriangle className="text-white" size={20} />
          <div>
            <h2 className="text-lg font-bold">üîí CRITICAL SECURITY UPDATE</h2>
            <p className="text-red-100 text-xs">IT Security Department - Action Required</p>
          </div>
        </div>
      </div>

      {/* Company Header */}
      <div className="bg-blue-600 text-white p-3 rounded-lg">
        <div className="flex items-center gap-2">
          <div className="bg-white rounded p-1">
            <svg className="w-6 h-6 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
              <path d="M23 0H1C.4 0 0 .4 0 1v16c0 .6.4 1 1 1h22c.6 0 1-.4 1-1V1c0-.6-.4-1-1-1z"/>
            </svg>
          </div>
          <div>
            <h3 className="font-bold">Zoom Enterprise Security</h3>
            <p className="text-blue-100 text-xs">Mandatory Compliance Update</p>
          </div>
        </div>
      </div>

      {/* Main Alert - Compact */}
      <div className="bg-yellow-50 dark:bg-yellow-900/30 border-2 border-yellow-400 rounded-lg p-4">
        <h3 className="font-bold text-yellow-800 dark:text-yellow-200 mb-2">
          ‚ö†Ô∏è CVE-2024-7891: Critical Vulnerability Detected
        </h3>
        
        <div className="bg-red-100 dark:bg-red-900/50 rounded p-3 border border-red-300">
          <p className="font-semibold text-red-800 dark:text-red-200 text-sm">
            üïê URGENT: Update Required by 5:00 PM Today
          </p>
          <p className="text-xs text-red-700 dark:text-red-300 mt-1">
            Account suspension if not completed immediately
          </p>
        </div>
      </div>

      {/* Compact Update Process */}
      <div className="bg-white dark:bg-gray-800 rounded-lg p-4 border-2 border-blue-500">
        <h3 className="font-bold mb-3 text-blue-600">Security Update Process</h3>
        <div className="grid grid-cols-3 gap-2 text-xs">
          <div className="text-center p-2 bg-blue-50 dark:bg-blue-900/30 rounded">
            <div className="w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-bold mx-auto mb-1">1</div>
            <p className="font-semibold">Verify System</p>
          </div>
          <div className="text-center p-2 bg-blue-50 dark:bg-blue-900/30 rounded">
            <div className="w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-bold mx-auto mb-1">2</div>
            <p className="font-semibold">Install Patch</p>
          </div>
          <div className="text-center p-2 bg-blue-50 dark:bg-blue-900/30 rounded">
            <div className="w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-bold mx-auto mb-1">3</div>
            <p className="font-semibold">Verify Complete</p>
          </div>
        </div>
      </div>

      <button
        onClick={handleDownloadClick}
        className="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors font-semibold flex items-center justify-center gap-2"
      >
        <Shield size={20} />
        START MANDATORY SECURITY UPDATE
      </button>

      <div className="text-center">
        <p className="text-xs text-gray-500">
          IT Security Dept ‚Ä¢ it-security@company.com ‚Ä¢ Ext: 2847
        </p>
      </div>
    </div>
  )

  // Real Video Component with actual camera and audio level monitoring
  const LiveVideoFeed = () => {
    const videoRef = useRef<HTMLVideoElement>(null)
    const audioContextRef = useRef<AudioContext | null>(null)
    const analyserRef = useRef<AnalyserNode | null>(null)
    const [audioLevel, setAudioLevel] = useState(0)
    
    useEffect(() => {
      if (videoStream && videoRef.current) {
        videoRef.current.srcObject = videoStream
        
        // Set up audio analysis for microphone level monitoring
        const audioTracks = videoStream.getAudioTracks()
        if (audioTracks.length > 0) {
          try {
            const audioContext = new AudioContext()
            const analyser = audioContext.createAnalyser()
            const source = audioContext.createMediaStreamSource(videoStream)
            
            analyser.fftSize = 256
            source.connect(analyser)
            
            audioContextRef.current = audioContext
            analyserRef.current = analyser
            
            // Monitor audio levels
            const dataArray = new Uint8Array(analyser.frequencyBinCount)
            const updateAudioLevel = () => {
              if (analyserRef.current) {
                analyserRef.current.getByteFrequencyData(dataArray)
                const average = dataArray.reduce((a, b) => a + b) / dataArray.length
                setAudioLevel(Math.round((average / 255) * 100))
                requestAnimationFrame(updateAudioLevel)
              }
            }
            updateAudioLevel()
          } catch (error) {
            console.log('Audio analysis setup failed:', error)
          }
        }
      }
      
      return () => {
        if (audioContextRef.current) {
          audioContextRef.current.close()
        }
      }
    }, [videoStream])

    if (!videoStream) {
      return (
        <div className="bg-gray-900 aspect-video rounded-lg flex items-center justify-center">
          <div className="text-center text-gray-400">
            <Camera size={48} className="mx-auto mb-2" />
            <p className="text-sm">Camera Access Denied</p>
          </div>
        </div>
      )
    }

    const audioTracks = videoStream.getAudioTracks()
    const videoTracks = videoStream.getVideoTracks()

    return (
      <div className="relative">
        <video
          ref={videoRef}
          autoPlay
          playsInline
          muted={false} // Allow audio playback for testing
          className="w-full aspect-video rounded-lg bg-black"
        />
        <div className="absolute top-2 right-2 bg-red-600 text-white px-2 py-1 rounded text-xs font-bold animate-pulse">
          üî¥ LIVE
        </div>
        <div className="absolute bottom-2 left-2 bg-black/50 text-white px-2 py-1 rounded text-xs">
          üìπüì± REAL VIDEO SURVEILLANCE
        </div>
        
        {/* Audio level indicator */}
        {audioTracks.length > 0 && (
          <div className="absolute bottom-2 right-2 bg-green-600 text-white px-2 py-1 rounded text-xs">
            üé§ AUDIO: {audioLevel}%
            <div className="w-8 h-1 bg-black/30 rounded-full mt-1">
              <div 
                className="h-full bg-white rounded-full transition-all duration-100"
                style={{ width: `${audioLevel}%` }}
              ></div>
            </div>
          </div>
        )}
        
        <div className="absolute top-2 left-2 bg-red-600 text-white px-2 py-1 rounded text-xs font-bold">
          ‚ö†Ô∏è HIJACKED
        </div>
        
        {/* Track status indicators */}
        <div className="absolute top-12 left-2 space-y-1">
          {videoTracks.length > 0 && (
            <div className="bg-blue-600 text-white px-2 py-1 rounded text-xs">
              üìπ Video: {videoTracks[0].label || 'Active'}
            </div>
          )}
          {audioTracks.length > 0 && (
            <div className="bg-purple-600 text-white px-2 py-1 rounded text-xs">
              üé§ Audio: {audioTracks[0].label || 'Active'}
            </div>
          )}
        </div>
      </div>
    )
  }

  const AttackerView = (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold text-red-600">üö® SOCIAL ENGINEERING ATTACK DASHBOARD</h2>
      
      {/* Attack Strategy */}
      <div className="bg-gray-100 dark:bg-gray-900 rounded-lg p-4 border-2 border-red-600">
        <h3 className="font-semibold text-red-700 dark:text-red-300 mb-3">Attack Strategy: Fake IT Security Update</h3>
        
        <div className="space-y-2 text-sm">
          <div className="flex items-start gap-2">
            <span className="text-red-600">üéØ</span>
            <span><strong>Target:</strong> Corporate employees using video conferencing</span>
          </div>
          <div className="flex items-start gap-2">
            <span className="text-red-600">üß†</span>
            <span><strong>Psychology:</strong> Exploit authority (IT dept) + fear (security breach)</span>
          </div>
          <div className="flex items-start gap-2">
            <span className="text-red-600">‚è∞</span>
            <span><strong>Urgency:</strong> "Must update by 5 PM or account suspended"</span>
          </div>
          <div className="flex items-start gap-2">
            <span className="text-red-600">üé≠</span>
            <span><strong>Disguise:</strong> Legitimate Zoom enterprise security update</span>
          </div>
        </div>
      </div>
      
      {permissionsGranted.length === 0 ? (
        <div className="bg-yellow-100 dark:bg-yellow-900/30 rounded-lg p-3">
          <p className="text-sm text-yellow-800 dark:text-yellow-200">
            ‚è≥ Waiting for user to click "START MANDATORY SECURITY UPDATE"...
          </p>
        </div>
      ) : (
        <div className="space-y-3">
          {/* Compact Attack Status */}
          <div className="bg-red-50 dark:bg-red-900/30 rounded-lg p-3 border-2 border-red-500">
            <h3 className="font-semibold text-red-800 dark:text-red-200 mb-2">
              üíÄ ATTACK SUCCESSFUL - {permissionsGranted.length + (fileDownloaded ? 1 : 0)} Vectors Compromised
            </h3>
            
            <div className="grid grid-cols-2 gap-2 text-xs">
              {fileDownloaded && (
                <div className="bg-black rounded p-2">
                  <div className="text-red-400 font-mono">üì• FILE INJECTED</div>
                  <div className="text-gray-400">Malware downloaded</div>
                </div>
              )}
              
              {permissionsGranted.includes('camera') && (
                <div className="bg-black rounded p-2">
                  <div className="text-green-400 font-mono">üìπ VIDEO LIVE</div>
                  <div className="text-gray-400">24/7 surveillance</div>
                </div>
              )}
              
              {permissionsGranted.includes('microphone') && (
                <div className="bg-black rounded p-2">
                  <div className="text-purple-400 font-mono">üé§ AUDIO LIVE</div>
                  <div className="text-gray-400">Recording calls</div>
                </div>
              )}
              
              {permissionsGranted.includes('location') && (
                <div className="bg-black rounded p-2">
                  <div className="text-blue-400 font-mono">üìç LOCATION</div>
                  <div className="text-gray-400">Real-time tracking</div>
                </div>
              )}
            </div>

            <div className="mt-2 p-2 bg-red-200 dark:bg-red-800 rounded text-xs text-center">
              üí∞ <strong>Market Value:</strong> ${(permissionsGranted.length + (fileDownloaded ? 1 : 0)) * 50} per victim
            </div>
          </div>

          {/* Live Video Feed - Compact */}
          {(permissionsGranted.includes('camera') || permissionsGranted.includes('microphone')) && (
            <div className="bg-red-50 dark:bg-red-900/30 rounded-lg p-3 border-2 border-red-500">
              <h3 className="font-semibold text-red-800 dark:text-red-200 mb-2 text-sm">
                üî¥ LIVE SURVEILLANCE FEED
              </h3>
              <LiveVideoFeed />
            </div>
          )}

          {/* Location - Compact */}
          {permissionsGranted.includes('location') && userLocation && (
            <div className="bg-black rounded-lg p-3">
              <div className="grid grid-cols-2 gap-2 font-mono text-xs">
                <div>
                  <span className="text-gray-400">Lat:</span>
                  <div className="text-green-400">{userLocation.lat.toFixed(4)}</div>
                </div>
                <div>
                  <span className="text-gray-400">Lon:</span>
                  <div className="text-green-400">{userLocation.lon.toFixed(4)}</div>
                </div>
              </div>
              <div className="text-center mt-2">
                <span className="text-red-400 animate-pulse text-xs">üî¥ TRACKING ACTIVE</span>
              </div>
            </div>
          )}

          {/* Stop Button */}
          <button
            onClick={() => window.location.reload()}
            className="w-full bg-gray-800 text-white py-2 rounded-lg hover:bg-gray-700 transition-colors text-sm"
          >
            üõë Stop Surveillance (Educational Demo Only)
          </button>
        </div>
      )}
    </div>
  )

  const WarningSignsComponent = (
    <ul className="space-y-2 text-sm">
      <li className="flex items-start">
        <span className="text-yellow-600 dark:text-yellow-400 mr-2">‚Ä¢</span>
        <span>Urgent security updates with extreme time pressure</span>
      </li>
      <li className="flex items-start">
        <span className="text-yellow-600 dark:text-yellow-400 mr-2">‚Ä¢</span>
        <span>Software updates requiring camera/microphone permissions</span>
      </li>
      <li className="flex items-start">
        <span className="text-yellow-600 dark:text-yellow-400 mr-2">‚Ä¢</span>
        <span>Threats of account suspension for not updating</span>
      </li>
      <li className="flex items-start">
        <span className="text-yellow-600 dark:text-yellow-400 mr-2">‚Ä¢</span>
        <span>Always verify updates through official channels</span>
      </li>
    </ul>
  )

  // Custom malicious overlay for permissions simulation
  const MaliciousOverlay = ({ transparencyLevel }: { transparencyLevel: number }) => {
    if (transparencyLevel === 0) return null;
    
    return (
      <div 
        className="absolute inset-0 pointer-events-none"
        style={{ opacity: transparencyLevel / 100 }}
      >
        <div className="bg-red-500/10 border-2 border-red-500 border-dashed rounded-lg p-4 h-full flex flex-col justify-center">
          <div className="bg-red-100 dark:bg-red-900/30 rounded-lg p-3 mb-4">
            <h3 className="text-red-800 dark:text-red-200 font-bold text-sm">
              üö® HIDDEN ATTACK: FAKE ZOOM SECURITY UPDATE!
            </h3>
          </div>
          
          <div className="space-y-3">
            {/* Camera Permission Status */}
            <div className="bg-red-200 dark:bg-red-800/50 rounded-lg p-2 border-2 border-red-400">
              <div className="flex items-center gap-2">
                <Camera className="text-red-700" size={20} />
                <span className="text-red-700 dark:text-red-300 font-semibold text-sm">
                  CAMERA ACCESS: {permissionsGranted.includes('camera') ? 'üî¥ GRANTED' : '‚è≥ REQUESTING...'}
                </span>
              </div>
              {permissionsGranted.includes('camera') && (
                <p className="text-xs text-red-600 mt-1">‚ö†Ô∏è Attacker can see you anytime!</p>
              )}
            </div>

            {/* Microphone Permission Status */}
            <div className="bg-red-200 dark:bg-red-800/50 rounded-lg p-2 border-2 border-red-400">
              <div className="flex items-center gap-2">
                <Mic className="text-red-700" size={20} />
                <span className="text-red-700 dark:text-red-300 font-semibold text-sm">
                  MICROPHONE: {permissionsGranted.includes('microphone') ? 'üî¥ GRANTED' : '‚è≥ REQUESTING...'}
                </span>
              </div>
              {permissionsGranted.includes('microphone') && (
                <p className="text-xs text-red-600 mt-1">‚ö†Ô∏è Attacker can hear everything!</p>
              )}
            </div>

            {/* Location Permission Status */}
            <div className="bg-red-200 dark:bg-red-800/50 rounded-lg p-2 border-2 border-red-400">
              <div className="flex items-center gap-2">
                <MapPin className="text-red-700" size={20} />
                <span className="text-red-700 dark:text-red-300 font-semibold text-sm">
                  LOCATION: {permissionsGranted.includes('location') ? 'üî¥ GRANTED' : '‚è≥ REQUESTING...'}
                </span>
              </div>
              {permissionsGranted.includes('location') && (
                <p className="text-xs text-red-600 mt-1">‚ö†Ô∏è Attacker knows where you are!</p>
              )}
            </div>

            {/* Attack Status */}
            <div className="bg-red-300 dark:bg-red-700/50 rounded-lg p-2 border border-red-500">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-red-600 rounded-full animate-pulse"></div>
                <span className="text-xs text-red-800 dark:text-red-200 font-semibold">
                  {permissionsGranted.length > 0 
                    ? `üö® ${permissionsGranted.length} PERMISSIONS HIJACKED!`
                    : 'ATTEMPTING PERMISSION HIJACK...'
                  }
                </span>
              </div>
              <div className="text-xs text-red-700 dark:text-red-300 mt-1">
                {permissionsGranted.length > 0 
                  ? 'You are now being monitored!'
                  : 'Click "Download" = Click "Allow" on hidden permissions'
                }
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <SplitScreenSimulation
      title="Permission Hijacking Simulation"
      victimView={VictimView}
      attackerView={AttackerView}
      onAttackSuccess={() => setAttackSuccess(true)}
      onAttackDefended={() => setAttackSuccess(false)}
      explanation={
        attackSuccess
          ? "You clicked the 'START MANDATORY SECURITY UPDATE' button, which triggered REAL browser permission requests for your camera, microphone, and location. This demonstrates how attackers exploit workplace security fears and IT authority to trick employees into granting dangerous permissions. The fake 'Zoom security update' is a common social engineering tactic that exploits trust in legitimate software."
          : "You successfully avoided the permission hijacking attempt by denying the browser permission requests. Always verify security updates through official channels and be suspicious of urgent IT requests that require immediate permission grants."
      }
      warningSignsComponent={WarningSignsComponent}
      maliciousOverlay={MaliciousOverlay}
    />
  )
}